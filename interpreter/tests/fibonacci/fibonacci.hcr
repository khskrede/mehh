%module main:Main
  %rec
  {main:Main.fib :: integerzmgmp:GHCziIntegerziType.Integer ->
                    integerzmgmp:GHCziIntegerziType.Integer =
     \ (dsdnp::integerzmgmp:GHCziIntegerziType.Integer) ->
         %case integerzmgmp:GHCziIntegerziType.Integer (base:GHCziClasses.zeze
                                                        @ integerzmgmp:GHCziIntegerziType.Integer
                                                        base:GHCziClasses.zdfEqInteger dsdnp
                                                        (integerzmgmp:GHCziInteger.smallInteger
                                                         (0::ghczmprim:GHCziPrim.Intzh)))
         %of (wildB1::ghczmprim:GHCziBool.Bool)
           {ghczmprim:GHCziBool.False ->
              %case integerzmgmp:GHCziIntegerziType.Integer (base:GHCziClasses.zeze
                                                             @ integerzmgmp:GHCziIntegerziType.Integer
                                                             base:GHCziClasses.zdfEqInteger dsdnp
                                                             (integerzmgmp:GHCziInteger.smallInteger
                                                              (1::ghczmprim:GHCziPrim.Intzh)))
              %of (wild1X8::ghczmprim:GHCziBool.Bool)
                {ghczmprim:GHCziBool.False ->
                   base:GHCziNum.zp @ integerzmgmp:GHCziIntegerziType.Integer
                   base:GHCziNum.zdfNumInteger
                   (main:Main.fib
                    (base:GHCziNum.zm @ integerzmgmp:GHCziIntegerziType.Integer
                     base:GHCziNum.zdfNumInteger dsdnp
                     (integerzmgmp:GHCziInteger.smallInteger
                      (1::ghczmprim:GHCziPrim.Intzh))))
                   (main:Main.fib
                    (base:GHCziNum.zm @ integerzmgmp:GHCziIntegerziType.Integer
                     base:GHCziNum.zdfNumInteger dsdnp
                     (integerzmgmp:GHCziInteger.smallInteger
                      (2::ghczmprim:GHCziPrim.Intzh))));
                 ghczmprim:GHCziBool.True ->
                   integerzmgmp:GHCziInteger.smallInteger
                   (1::ghczmprim:GHCziPrim.Intzh)};
            ghczmprim:GHCziBool.True ->
              integerzmgmp:GHCziInteger.smallInteger
              (0::ghczmprim:GHCziPrim.Intzh)}};
  main:Main.main :: (ghczmprim:GHCziTypes.IO
                     ghczmprim:GHCziUnit.Z0T) =
    base:GHCziBase.zd
    @ ((ghczmprim:GHCziTypes.ZMZN ghczmprim:GHCziTypes.Char))
    @ ((ghczmprim:GHCziTypes.IO ghczmprim:GHCziUnit.Z0T))
    base:SystemziIO.putStrLn
    (base:GHCziBase.zpzp @ ghczmprim:GHCziTypes.Char
     (base:GHCziBase.unpackCStringzh
      ("The 10. fibonacci number is: "::ghczmprim:GHCziPrim.Addrzh))
     (base:GHCziBase.zd @ integerzmgmp:GHCziIntegerziType.Integer
      @ ((ghczmprim:GHCziTypes.ZMZN ghczmprim:GHCziTypes.Char))
      (base:GHCziShow.show @ integerzmgmp:GHCziIntegerziType.Integer
       base:GHCziNum.zdfShowInteger)
      (main:Main.fib
       (integerzmgmp:GHCziInteger.smallInteger
        (10::ghczmprim:GHCziPrim.Intzh)))));
  main:ZCMain.main :: (ghczmprim:GHCziTypes.IO
                       ghczmprim:GHCziUnit.Z0T) =
    base:GHCziTopHandler.runMainIO @ ghczmprim:GHCziUnit.Z0T
    main:Main.main;
